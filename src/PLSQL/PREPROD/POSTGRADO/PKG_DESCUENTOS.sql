CREATE OR REPLACE PACKAGE PKG_DESCUENTOS AS
    FUNCTION ES_EGRESADO_NUEVO (
        P_CODIGO_ESTUDIANTE B_ESTUDIANTES.CODIGO%TYPE,
        P_ID_PERIODO CTI_PERIODO.ID_PERIODO%TYPE       
    ) RETURN NUMBER;

    FUNCTION ES_EGRESADO_ANTIGUO (
        P_CODIGO_ESTUDIANTE B_ESTUDIANTES.CODIGO%TYPE,
        P_ID_PERIODO CTI_PERIODO.ID_PERIODO%TYPE    
    ) RETURN NUMBER;

    FUNCTION ES_TRANSFERENCIA_INTERNA (
        P_CODIGO_ESTUDIANTE B_ESTUDIANTES.CODIGO%TYPE,
        P_ID_PERIODO CTI_PERIODO.ID_PERIODO%TYPE    
    ) RETURN NUMBER;

    FUNCTION ES_TRANSFERENCIA_EXTERNA (
        P_CODIGO_ESTUDIANTE B_ESTUDIANTES.CODIGO%TYPE,
        P_ID_PERIODO CTI_PERIODO.ID_PERIODO%TYPE    
    ) RETURN NUMBER;

    FUNCTION ES_REINTEGRO (
        P_CODIGO_ESTUDIANTE B_ESTUDIANTES.CODIGO%TYPE,
        P_ID_PERIODO CTI_PERIODO.ID_PERIODO%TYPE    
    ) RETURN NUMBER;

    FUNCTION ES_REINTEGRO_ACTUALIZACION (
        P_CODIGO_ESTUDIANTE B_ESTUDIANTES.CODIGO%TYPE,
        P_ID_PERIODO CTI_PERIODO.ID_PERIODO%TYPE    
    ) RETURN NUMBER;

    FUNCTION ES_MOVILIDAD_ENTRANTE (
        P_CODIGO_ESTUDIANTE B_ESTUDIANTES.CODIGO%TYPE,
        P_ID_PERIODO CTI_PERIODO.ID_PERIODO%TYPE    
    ) RETURN NUMBER;
END PKG_DESCUENTOS;
/

CREATE OR REPLACE PACKAGE BODY PKG_DESCUENTOS AS
    FUNCTION GET_CODIGO_TRANSACCION(
        P_ID_DESCUENTO CTI_DESCUENTO_COD_TRAN.ID_DESCUENTO%TYPE,
        P_ID_PERIODO   CTI_DESCUENTO_COD_TRAN.ID_PERIODO%TYPE
    ) RETURN NUMBER IS
        P_CODIGO_TRANSACCION NUMBER;
    BEGIN
        SELECT     CODIGO_TRANSACCION
        INTO       P_CODIGO_TRANSACCION
        FROM       CTI_DESCUENTO_COD_TRAN
        WHERE          ID_DESCUENTO = P_ID_DESCUENTO
                   AND ID_PERIODO = P_ID_PERIODO;

        RETURN P_CODIGO_TRANSACCION;
    EXCEPTION
    WHEN OTHERS THEN
        RETURN 0;
    END;

    FUNCTION ES_EGRESADO_NUEVO (
        P_CODIGO_ESTUDIANTE B_ESTUDIANTES.CODIGO%TYPE,
        P_ID_PERIODO CTI_PERIODO.ID_PERIODO%TYPE      
    ) RETURN NUMBER IS
        P_ES_GRADUADO NUMBER;
        V_CODIGO B_ESTUDIANTES.CODIGO%TYPE;
        V_NUMDOC DATOS_PERSONALES.NUMERO_DOCUMENTO%TYPE;
    BEGIN
        -- OBTENIENDO CODIGO Y NUMERO DE DOCUMENTO SI CUMPLE CON LAS CONDICIONES.
        SELECT     E.CODIGO, 
                   DP.NUMERO_DOCUMENTO
        INTO       V_CODIGO, 
                   V_NUMDOC
        FROM       B_ESTUDIANTES E
        INNER JOIN DATOS_PERSONALES DP ON E.CODIGO = DP.CODIGO_ESTUDIANTE
        WHERE          E.CODIGO = P_CODIGO_ESTUDIANTE
                   AND E.TIPO_DE_INGRESO NOT IN ('RI','RA','NR','ME','TI','TE')
        UNION
        SELECT A.COD_DEF, A.NUMDOC
        FROM   A_ASPIRANTES A
        WHERE  A.COD_DEF = P_CODIGO_ESTUDIANTE;

        IF (ADMISIONES.PKG_UTILS.ESNUEVO(V_CODIGO) = 1 AND ADMISIONES.PKG_INSCRIPCIONES.FNC_ES_GRADUADO(V_NUMDOC) = 'SI') THEN
            -- DEVUELVE EL CODIGO DE TRANSACCION DE ACUERDO AL PERIODO.
            RETURN GET_CODIGO_TRANSACCION('1', P_ID_PERIODO);
        END IF;
        RETURN 0;
    END;

    FUNCTION ES_EGRESADO_ANTIGUO (
        P_CODIGO_ESTUDIANTE B_ESTUDIANTES.CODIGO%TYPE,
        P_ID_PERIODO CTI_PERIODO.ID_PERIODO%TYPE      
    ) RETURN NUMBER IS
        P_ES_GRADUADO NUMBER;
    BEGIN
        -- VERIFICANDO SI EL ESTUDIANTE ES GRADUADO.
        SELECT DISTINCT COUNT(1)
        INTO            P_ES_GRADUADO
        FROM            (SELECT CODIGO_ESTUDIANTE,
                                NUMERO_DOCUMENTO
                         FROM   ADMISIONES.DATOS_PERSONALES
                         UNION
                         SELECT CODIGO_ESTUDIANTE,
                                NUMERO_DOCUMENTO
                         FROM   POSTGRADO.DATOS_PERSONALES) A
        INNER JOIN       B_ESTUDIANTES E ON E.CODIGO = A.CODIGO_ESTUDIANTE
        WHERE               CODIGO_ESTUDIANTE = P_CODIGO_ESTUDIANTE
                        AND ADMISIONES.PKG_INSCRIPCIONES.FNC_ES_GRADUADO(NUMERO_DOCUMENTO) = 'SI'
                        AND (   E.MATRICULADOS_CICLO_ANTERIOR IN ('P', 'V')
                             OR (ADMISIONES.PKG_UTILS.ESNUEVO(E.CODIGO) = 1 AND E.TIPO_DE_INGRESO IN ('RI','RA','NR','ME','TI','TE')));

        IF(P_ES_GRADUADO >= 1) THEN
            RETURN GET_CODIGO_TRANSACCION('2', P_ID_PERIODO);
        END IF;

        RETURN 0;
    END;

    FUNCTION ES_TRANSFERENCIA_INTERNA (
        P_CODIGO_ESTUDIANTE B_ESTUDIANTES.CODIGO%TYPE,
        P_ID_PERIODO CTI_PERIODO.ID_PERIODO%TYPE      
    ) RETURN NUMBER IS
        V_COINCIDENCIAS NUMBER;
    BEGIN
        SELECT COUNT(CODIGO)
        INTO   V_COINCIDENCIAS
        FROM   B_ESTUDIANTES
        WHERE      TIPO_DE_INGRESO = 'TI'
               AND CICLO_DE_INGRESO = ANIO || TO_NUMBER(CICLO)
               AND CODIGO = P_CODIGO_ESTUDIANTE;
               
        IF(V_COINCIDENCIAS >= 1) THEN
            RETURN GET_CODIGO_TRANSACCION('3', P_ID_PERIODO);
        END IF;

        RETURN 0;
    END;

    FUNCTION ES_TRANSFERENCIA_EXTERNA (
        P_CODIGO_ESTUDIANTE B_ESTUDIANTES.CODIGO%TYPE,
        P_ID_PERIODO CTI_PERIODO.ID_PERIODO%TYPE      
    ) RETURN NUMBER IS
        V_COINCIDENCIAS NUMBER;
    BEGIN
        SELECT COUNT(CODIGO)
        INTO   V_COINCIDENCIAS
        FROM   B_ESTUDIANTES
        WHERE      TIPO_DE_INGRESO = 'TE'
               AND CICLO_DE_INGRESO = ANIO || TO_NUMBER(CICLO)
               AND CODIGO = P_CODIGO_ESTUDIANTE;
               
        IF(V_COINCIDENCIAS >= 1) THEN
            RETURN GET_CODIGO_TRANSACCION('4', P_ID_PERIODO);
        END IF;

        RETURN 0;
    END;

    FUNCTION ES_REINTEGRO (
        P_CODIGO_ESTUDIANTE B_ESTUDIANTES.CODIGO%TYPE,
        P_ID_PERIODO CTI_PERIODO.ID_PERIODO%TYPE      
    ) RETURN NUMBER IS
        V_COINCIDENCIAS NUMBER;
    BEGIN
        SELECT COUNT(CODIGO)
        INTO   V_COINCIDENCIAS
        FROM   B_ESTUDIANTES
        WHERE      TIPO_DE_INGRESO = 'RI'
               AND CICLO_DE_INGRESO = ANIO || TO_NUMBER(CICLO)
               AND CODIGO = P_CODIGO_ESTUDIANTE;
               
        IF(V_COINCIDENCIAS >= 1) THEN
            RETURN GET_CODIGO_TRANSACCION('5', P_ID_PERIODO);
        END IF;

        RETURN 0;
    END;

    FUNCTION ES_REINTEGRO_ACTUALIZACION (
        P_CODIGO_ESTUDIANTE B_ESTUDIANTES.CODIGO%TYPE,
        P_ID_PERIODO CTI_PERIODO.ID_PERIODO%TYPE      
    ) RETURN NUMBER IS
        V_COINCIDENCIAS NUMBER;
    BEGIN
        SELECT COUNT(CODIGO)
        INTO   V_COINCIDENCIAS
        FROM   B_ESTUDIANTES
        WHERE      TIPO_DE_INGRESO IN ('RA', 'AR')
               AND CICLO_DE_INGRESO = ANIO || TO_NUMBER(CICLO)
               AND CODIGO = P_CODIGO_ESTUDIANTE;
               
        IF(V_COINCIDENCIAS >= 1) THEN
            RETURN GET_CODIGO_TRANSACCION('6', P_ID_PERIODO);
        END IF;

        RETURN 0;
    END;

    FUNCTION ES_MOVILIDAD_ENTRANTE (
        P_CODIGO_ESTUDIANTE B_ESTUDIANTES.CODIGO%TYPE,
        P_ID_PERIODO CTI_PERIODO.ID_PERIODO%TYPE      
    ) RETURN NUMBER IS
        V_COINCIDENCIAS NUMBER;
    BEGIN
        SELECT COUNT(CODIGO)
        INTO   V_COINCIDENCIAS
        FROM   B_ESTUDIANTES
        WHERE      TIPO_DE_INGRESO IN('NR', 'HM', 'ME')
               AND CICLO_DE_INGRESO = ANIO || TO_NUMBER(CICLO)
               AND CODIGO = P_CODIGO_ESTUDIANTE;
               
        IF(V_COINCIDENCIAS >= 1) THEN
            RETURN GET_CODIGO_TRANSACCION('7', P_ID_PERIODO);
        END IF;

        RETURN 0;
    END;
END PKG_DESCUENTOS;
